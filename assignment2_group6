1.

modelling decisions:
 turn and flag variables as boolean (only values are 1 and 0)
 turn initialized nondeterministically to represent unknown initial value
 processes as non-active proctypes started by init process
 
 infinite loop as 
 Loop:
  ...code...
 goto Loop

 while(c) do S modelled as 
 do 
 ::(c)->S  
 ::else break
 od

 await flag[1-i] == 0 modelled as
 (flag[1-i] == 0)

complete code: 

bool turn, flag[2];

init
{
  if
  ::turn = true;
  ::turn = false;
  fi;
  
  flag[0] = 0;
  flag[1] = 0;
  run p0();
  run p1()
}

proctype p0()
{
  Loop:
  flag[0] = 1;
  do
  ::(turn == 1) -> (flag[1] == 0) -> turn = 0
  ::else break
  od;
  flag[0] = 0;
  goto Loop
}

proctype p1()
{
  Loop:
  flag[1] = 1;
  do
  ::(turn == 0) -> (flag[0] == 0) -> turn = 1
  ::else break
  od;
  flag[1] = 0;
  goto Loop
}

2.
