1.

for the promela model of the algorithm, please see file "exercise4_part1.pml".

modelling annotations:
 turn and flag variables as boolean (since they only have values of 1 and 0)
 turn initialized nondeterministically to represent unknown initial value
 processes as non-active proctypes started by init process to ensure variable initialization before the processes start
 
 "for(;;){...}" 
   modelled as 
 "Loop:
  ...code...
 goto Loop"

 "while(c) do S"
   modelled as 
 "do 
 ::(c)->S  
 ::else break
 od"

 "await flag[1-i] == 0"
   modelled as
 "(flag[1-i] == 0)"



2.
the model in exercise4_part1.pml represents the algorithm as given.
this does not, however, enable us to find a problem with the algorithm - there is nothing to actually assert that mutual exclusion is guaranteed.
a process is only allowed to be in its critical section when the turn variable is set to its, the process', index. therefore, we added an assertion in the model to check that turn == i after the do loop is left by process i.

see exercise4_part2.pml for the resulting model. it is the same as exercise4_part2.pml except for those two assertions.



3.
a simple simulation of exercise4_part2.pml with spin eventually yields an assertion failure. 
a relatively short trail leading to an assertion failure can be obtained by creating a verifier and running it with the following commands.

spin -a exercise4_part2.pml
gcc -DREACH -DSAFETY -o pan pan.c
./pan



4.
consider the trail listed at the end of this file. it was created by the verifier and can be displayed with the command "spin -t -p exercise4_part2.pml".
the crucial section starts at step 27.
27: p1 checks flag[0] within the do loop and reads it as 0. its "program counter" therefore progresses to the next line.
28: p1 gets interrupted by p0 which requests access to the critical section by setting flag[0] again
29: p0 enters the critical section (by "break"ing out of the do loop) because turn == 1 is still false so the "else" case is chosen
30: p1 interrupts p0 and sets turn to 1
31: p1 goes on to enter the critical section

at this point both processes are in their critical section 
this results from the fact that it is possible for a process to get interrupted between 1) determining it can enter the critical section and 2) signalling entry by setting the "turn" variable, i.e. between the two commands within the while loop in the pseudocode.

finally one of the two assert statements fails because obviously turn cannot be both 1 and 0. this way the assertions we added serve to discover the flaw in the algorithm.



spin -t -p exercise4_part2.pml
  1:	proc  0 (:init:) exercise4_part2.pml:6 (state 1)	[turn = 1]
  2:	proc  0 (:init:) exercise4_part2.pml:10 (state 5)	[flag[0] = 0]
  3:	proc  0 (:init:) exercise4_part2.pml:11 (state 6)	[flag[1] = 0]
Starting p0 with pid 1
  4:	proc  0 (:init:) exercise4_part2.pml:12 (state 7)	[(run p0())]
Starting p1 with pid 2
  5:	proc  0 (:init:) exercise4_part2.pml:13 (state 8)	[(run p1())]
  6:	proc  2 (p1) exercise4_part2.pml:32 (state 1)	[flag[1] = 1]
  7:	proc  2 (p1) exercise4_part2.pml:35 (state 5)	[else]
  8:	proc  2 (p1) exercise4_part2.pml:37 (state 10)	[assert((turn==1))]
  9:	proc  1 (p0) exercise4_part2.pml:19 (state 1)	[flag[0] = 1]
 10:	proc  2 (p1) exercise4_part2.pml:38 (state 11)	[flag[1] = 0]
 11:	proc  2 (p1) exercise4_part2.pml:32 (state 1)	[flag[1] = 1]
 12:	proc  2 (p1) exercise4_part2.pml:35 (state 5)	[else]
 13:	proc  1 (p0) exercise4_part2.pml:21 (state 2)	[((turn==1))]
 14:	proc  2 (p1) exercise4_part2.pml:37 (state 10)	[assert((turn==1))]
 15:	proc  2 (p1) exercise4_part2.pml:38 (state 11)	[flag[1] = 0]
 16:	proc  1 (p0) exercise4_part2.pml:21 (state 3)	[((flag[1]==0))]
 17:	proc  2 (p1) exercise4_part2.pml:32 (state 1)	[flag[1] = 1]
 18:	proc  2 (p1) exercise4_part2.pml:35 (state 5)	[else]
 19:	proc  2 (p1) exercise4_part2.pml:37 (state 10)	[assert((turn==1))]
 20:	proc  1 (p0) exercise4_part2.pml:21 (state 4)	[turn = 0]
 21:	proc  2 (p1) exercise4_part2.pml:38 (state 11)	[flag[1] = 0]
 22:	proc  2 (p1) exercise4_part2.pml:32 (state 1)	[flag[1] = 1]
 23:	proc  2 (p1) exercise4_part2.pml:34 (state 2)	[((turn==0))]
 24:	proc  1 (p0) exercise4_part2.pml:22 (state 5)	[else]
 25:	proc  1 (p0) exercise4_part2.pml:24 (state 10)	[assert((turn==0))]
 26:	proc  1 (p0) exercise4_part2.pml:25 (state 11)	[flag[0] = 0]
 27:	proc  2 (p1) exercise4_part2.pml:34 (state 3)	[((flag[0]==0))]
 28:	proc  1 (p0) exercise4_part2.pml:19 (state 1)	[flag[0] = 1]
 29:	proc  1 (p0) exercise4_part2.pml:22 (state 5)	[else]
 30:	proc  2 (p1) exercise4_part2.pml:34 (state 4)	[turn = 1]
 31:	proc  2 (p1) exercise4_part2.pml:35 (state 5)	[else]
 32:	proc  2 (p1) exercise4_part2.pml:37 (state 10)	[assert((turn==1))]
 33:	proc  2 (p1) exercise4_part2.pml:38 (state 11)	[flag[1] = 0]
spin: exercise4_part2.pml:24, Error: assertion violated
spin: text of failed assertion: assert((turn==0))
 34:	proc  1 (p0) exercise4_part2.pml:24 (state 10)	[assert((turn==0))]
spin: trail ends after 34 steps
#processes: 3
		turn = 1
		flag[0] = 1
		flag[1] = 0
 34:	proc  2 (p1) exercise4_part2.pml:32 (state 1)
 34:	proc  1 (p0) exercise4_part2.pml:25 (state 11)
 34:	proc  0 (:init:) exercise4_part2.pml:14 (state 9) <valid end state>
3 processes created
